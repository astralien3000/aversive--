#ifndef TIMER_DEFS_HPP
#define TIMER_DEFS_HPP

#include <base/static_list.hpp>
#include <avr/io.h>

////////////////////////////////////////////////////////
// REGISTERS DEFS //////////////////////////////////////

template<int ID>
struct TimerRegister {
  enum { SIZE = 0 };
};

// TIMER 0
template<>
struct TimerRegister<0> {
  typedef StaticList<0,1, (int)&TCCR0> Control;
  typedef StaticList<0,1, (int)&OCR0>  Compare;
  enum {
    // Registers
    COUNTER = (int)&TCNT0,
    ////////////
    SIZE = 8,
    EVENTS = 1
  };
};

// TIMER 1
template<>
struct TimerRegister<1> {
  typedef StaticList<0,3, (int)&TCCR1A, (int)&TCCR1B, (int)&TCCR1C> Control;
  typedef StaticList<0,3, (int)&OCR1A, (int)&OCR1B, (int)&OCR1C>    Compare;
  enum {
    // Registers
    COUNTER   = (int)&TCNT1,
    ////////////
    SIZE = 16,
    EVENTS = 3
  };
};


// INTERRUPT REGISTERS
struct TimerInterrupt {
  typedef StaticList<0,2, (int)&TIMSK,(int)&ETIMSK> Mask;
  typedef StaticList<0,2, (int)&TIFR,(int)&ETIFR>   Flag;
};

////////////////////////////////////////////////////////
// Waveform Generator Mode /////////////////////////////

template<int ID> struct WGM {};

// TIMER 0
template<>
struct WGM<0> {
  typedef StaticList<0,1, 0> Normal;
  typedef StaticList<0,1, (1 << WGM00)> Pwm;
  typedef StaticList<0,1, (1 << WGM01)> Ctc;
  typedef StaticList<0,1, (1 << WGM00)|(1 << WGM01)> FastPwm;
};

// TIMER 1
//// README: only 10 bits PWM available
template<>
struct WGM<1> {
  typedef StaticList<0,3, 0,0,0> Normal;
  typedef StaticList<0,3, (1 << WGM10) | (1 << WGM11),0,0> Pwm;
  typedef StaticList<0,3, 0,(1 << WGM12),0> Ctc;
  typedef StaticList<0,3, (1 << WGM10) | (1 << WGM11),(1 << WGM12),0> FastPwm;
};

////////////////////////////////////////////////////////
// Prescaler ///////////////////////////////////////////

template<int ID, int PRESCALE> struct Prescaler {};

#define PRESCALER_NONE -1
#define PRESCALER_MASK -2

// TIMER 0
#define MACRO_PRESCALER(num, bit2, bit1, bit0)				\
  template<> struct Prescaler<0, num> {					\
    typedef StaticList<0,1, ((bit2 << CS02) | (bit1 << CS01) | (bit0 << CS00))> Config; \
  };

MACRO_PRESCALER(-1,   0,0,0)

MACRO_PRESCALER(0,    0,0,1)
MACRO_PRESCALER(8,    0,1,0)
MACRO_PRESCALER(32,   0,1,1)
MACRO_PRESCALER(64,   1,0,0)
MACRO_PRESCALER(128,  1,0,1)
MACRO_PRESCALER(256,  1,1,0)
MACRO_PRESCALER(1024, 1,1,1)

MACRO_PRESCALER(-2,   1,1,1)

#undef MACRO_PRESCALER

// TIMERS 1 & 3
#define MACRO_PRESCALER(num, bit2, bit1, bit0)				\
  template<> struct Prescaler<1, num> {					\
    typedef StaticList<0,3, 0,((bit2 << CS12) | (bit1 << CS11) | (bit0 << CS10)),0> Config; \
  };									\
  template<> struct Prescaler<3, num> {					\
    typedef StaticList<0,3, 0,((bit2 << CS32) | (bit1 << CS31) | (bit0 << CS30)),0> Config; \
  };									\

MACRO_PRESCALER(-1,   0,0,0)

MACRO_PRESCALER(0,    0,0,1)
MACRO_PRESCALER(8,    0,1,0)
MACRO_PRESCALER(64,   0,1,1)
MACRO_PRESCALER(256,  1,0,0)
MACRO_PRESCALER(1024, 1,0,1)

MACRO_PRESCALER(-3,   1,1,0)
MACRO_PRESCALER(-4,   1,1,1)

MACRO_PRESCALER(-2,   1,1,1)

#undef MACRO_PRESCALER
// END TIMER 1 & 3

////////////////////////////////////////////////////////
// Interrupt Mask //////////////////////////////////////

template<int ID, int EID = 0> struct InterruptMask {};

// TIMER 0
template<>
struct InterruptMask<0, 0> {
  typedef StaticList<0,2, (1 << OCIE0), 0> Match;
  //enum { OVERFLOW = (1 << TOIE0) };
};

// TIMER 1
template<>
struct InterruptMask<1,0> {
  typedef StaticList<0,2, (1 << OCIE1A), 0> Match;
  //enum { OVERFLOW = (1 << TOIE1) };
};

template<>
struct InterruptMask<1,1> {
  typedef StaticList<0,2, (1 << OCIE1B), 0> Match;
};

template<>
struct InterruptMask<1,2> {
  typedef StaticList<0,2, 0, (1 << OCIE1C)> Match;
};

////////////////////////////////////////////////////////

#endif//TIMER_DEFS_HPP
