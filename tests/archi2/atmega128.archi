uc atmega128 {
  
  hardware timer[0] {
    register[8] control = { TCCR0 } {
      config-list wgm {
        config normal  = { 0            };
        config pwm     = { (1 << WGM00) };
        config ctc     = { (1 << WGM01) };
        config fastpwm = { 0            };
      };
      
      config-list prescaler {
        config 0    = { (0 << CS02) | (0 << CS01) | (1 << CS00) };
        config 8    = { (0 << CS02) | (1 << CS01) | (0 << CS00) };
        config 32   = { (0 << CS02) | (1 << CS01) | (1 << CS00) };
        config 64   = { (1 << CS02) | (0 << CS01) | (0 << CS00) };
        config 128  = { (1 << CS02) | (0 << CS01) | (1 << CS00) };
        config 256  = { (1 << CS02) | (1 << CS01) | (0 << CS00) };
        config 1024 = { (1 << CS02) | (1 << CS01) | (1 << CS00) };
      };
    };

    register[8] counter = { TCNT0 };

    register[8] compare[0] = { OCR0 };

    register[8] imask = { TIMSK } {
      config match[0] = { (1 << OCIE0) };
      config overflow = { (1 << TIOE0) };
    };

    register[8] iflag = { TIFR };
  };

  hardware timer[1] {
    register[8] control = { TCCR1A, TCCR1B, TCCR1C } {
      config-list wgm {
        config normal  = { 0                          , 0           , 0 };
        config pwm     = { (1 << WGM10) | (1 << WGM11), 0           , 0 };
        config ctc     = { 0                          , (1 << WGM12), 0 };
        config fastpwm = { (1 << WGM10) | (1 << WGM11), (1 << WGM12), 0 };
      };
      
      config-list prescaler {
        config 0    = { 0, (0 << CS12) | (0 << CS11) | (1 << CS10), 0 };
        config 8    = { 0, (0 << CS12) | (1 << CS11) | (0 << CS10), 0 };
        config 64   = { 0, (0 << CS12) | (1 << CS11) | (1 << CS10), 0 };
        config 256  = { 0, (1 << CS12) | (0 << CS11) | (0 << CS10), 0 };
        config 1024 = { 0, (1 << CS12) | (0 << CS11) | (1 << CS10), 0 };
      };
    };

    register[16] counter = { TCNT1 };

    register[16] compare[0] = { OCR1A };
    register[16] compare[1] = { OCR1B };

    register[8] imask = { TIMSK } {
      config match[0] = { (1 << OCIE1A) };
      config match[1] = { (1 << OCIE1B) };
      config overflow = { (1 << TOIE1)  };
    };

    register[8] iflag = { TIFR };
  };

  hardware uart[0] {
    register[8] flag = { UCSR0A } {
      config recvend = { (1 << RXC0)  };
      config sendend = { (1 << TXC0)  };
      config empty   = { (1 << UDRE0) };
    };

    register[8] control = { UCSR0A, UCSR0B, UCSR0C } {
      config synchronous = { 0, 0, (1 << UMSEL0) };
      
      config-list enable {
        config recv = { 0, (1 << RXEN0), 0 };
        config send = { 0, (1 << TXEN0), 0 };
      };

      config-list ienable {
        config recv  = { 0, (1 << RXCIE0), 0 };
	config send  = { 0, (1 << TXCIE0), 0 };
      	config empty = { 0, (1 << UDRIE0), 0 };
      };

      config-list flag {
        config recvend = { (1 << RXC0) , 0, 0 };
	config sendend = { (1 << TXC0) , 0, 0 };
	config empty   = { (1 << UDRE0), 0, 0 };
      };

      config-list charsize {
        config 5 = { 0, (0 << UCSZ2), (0 << UCSZ1) | (0 << UCSZ0) };
	config 6 = { 0, (0 << UCSZ2), (0 << UCSZ1) | (1 << UCSZ0) };
	config 7 = { 0, (0 << UCSZ2), (1 << UCSZ1) | (0 << UCSZ0) };
	config 8 = { 0, (0 << UCSZ2), (1 << UCSZ1) | (1 << UCSZ0) };
	config 9 = { 0, (1 << UCSZ2), (1 << UCSZ1) | (1 << UCSZ0) };
      };

      config-list parity {
        config disabled = { 0, 0, 0                           };
	config even     = { 0, 0, (1 << UPM01)                };
	config odd      = { 0, 0, (1 << UPM01) | (1 << UPM00) };
      };

      config-list stopbit {
        config 1 = { 0, 0, 0            };
	config 2 = { 0, 0, (1 << USBS0) };
      };
    };

    register[8] baudrate = { UBRR0L, UBRR0H };

    register[8] data = { UDR0 };
  };

  hardware eeprom[0] {
    register[8] address = { EEARL, EEARH };
    register[8] data = { EEDR };

    register[8] control = { EECR } {
      config masterwrite = { (1 << EEMWE) };
      config write       = { (1 << EEWE)  };
      config read        = { (1 << EERE)  };
    };
  };

  hardware xmem[0] {
    register[8] control = { MCUCR, XMCRA } {
      config enable      = { (1 << SRE), 0 };
      config defaultwait = { 0, (1 << SRW11) | (1 << SRW00) };
    };
  };
};