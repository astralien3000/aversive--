test.cpp: In instantiation of ‘void TestConfigsSimpleAssign3KO<DUMMY>::run() [with unsigned char DUMMY = 0u]’:
test.cpp:437:12:   required from here
test.cpp:405:10: erreur: no match for ‘operator=’ (operand types are ‘MemoryMapping::BitField8<G1, 1> {aka const MemoryMapping::BitField<unsigned char, G1, 1>}’ and ‘const MemoryMapping::Config<unsigned char, G1, 192u>’)
     R1B1 = G1F2C1;
          ^
test.cpp:405:10: note: candidates are:
In file included from ../../../../hdl/common/include/util/memory_mapping.hpp:63:0,
                 from test.cpp:1:
../../../../hdl/common/include/util/memory_mapping/bitfield_impl.hpp:14:50: note: const MemoryMapping::BitField<RegType, Group, BITNUM>& MemoryMapping::BitField<RegType, Group, BITNUM>::operator=(const MemoryMapping::Config<RegType, Group, (1 << BITNUM)>&) const [with RegType = unsigned char; Group = G1; int BITNUM = 1]
   inline const BitField<RegType, Group, BITNUM>& BitField<RegType, Group, BITNUM>::operator=(const Config<RegType, Group, (1<<BITNUM)>& cfg) const {
                                                  ^
../../../../hdl/common/include/util/memory_mapping/bitfield_impl.hpp:14:50: note:   no known conversion for argument 1 from ‘const MemoryMapping::Config<unsigned char, G1, 192u>’ to ‘const MemoryMapping::Config<unsigned char, G1, 2u>&’
In file included from ../../../../hdl/common/include/util/memory_mapping.hpp:63:0,
                 from test.cpp:1:
../../../../hdl/common/include/util/memory_mapping/bitfield_impl.hpp:20:50: note: const MemoryMapping::BitField<RegType, Group, BITNUM>& MemoryMapping::BitField<RegType, Group, BITNUM>::operator=(const MemoryMapping::BitField<RegType, Group, BITNUM>&) const [with RegType = unsigned char; Group = G1; int BITNUM = 1]
   inline const BitField<RegType, Group, BITNUM>& BitField<RegType, Group, BITNUM>::operator=(const BitField<RegType, Group, BITNUM>& bf) const {
                                                  ^
../../../../hdl/common/include/util/memory_mapping/bitfield_impl.hpp:20:50: note:   no known conversion for argument 1 from ‘const MemoryMapping::Config<unsigned char, G1, 192u>’ to ‘const MemoryMapping::BitField<unsigned char, G1, 1>&’
In file included from ../../../../hdl/common/include/util/memory_mapping.hpp:56:0,
                 from test.cpp:1:
../../../../hdl/common/include/util/memory_mapping/bitfield.hpp:43:92: note: template<class OtherRegType, class OtherGroup, int OTHER_BITNUM> const MemoryMapping::BitField<RegType, Group, BITNUM>& MemoryMapping::BitField<RegType, Group, BITNUM>::operator=(const MemoryMapping::BitField<OtherRegType, OtherGroup, OTHER_BITNUM>&) const [with OtherRegType = OtherRegType; OtherGroup = OtherGroup; int OTHER_BITNUM = OTHER_BITNUM; RegType = unsigned char; Group = G1; int BITNUM = 1]
     template<typename OtherRegType, typename OtherGroup, int OTHER_BITNUM> const BitField& operator=(const BitField<OtherRegType, OtherGroup, OTHER_BITNUM>& bf) const;
                                                                                            ^
../../../../hdl/common/include/util/memory_mapping/bitfield.hpp:43:92: note:   template argument deduction/substitution failed:
test.cpp:405:10: note:   ‘const MemoryMapping::Config<unsigned char, G1, 192u>’ is not derived from ‘const MemoryMapping::BitField<RegType, Group, BITNUM>’
     R1B1 = G1F2C1;
          ^
In file included from ../../../../hdl/common/include/util/memory_mapping.hpp:63:0,
                 from test.cpp:1:
../../../../hdl/common/include/util/memory_mapping/bitfield_impl.hpp:32:50: note: const MemoryMapping::BitField<RegType, Group, BITNUM>& MemoryMapping::BitField<RegType, Group, BITNUM>::operator=(bool) const [with RegType = unsigned char; Group = G1; int BITNUM = 1]
   inline const BitField<RegType, Group, BITNUM>& BitField<RegType, Group, BITNUM>::operator=(const bool val) const {
                                                  ^
../../../../hdl/common/include/util/memory_mapping/bitfield_impl.hpp:32:50: note:   no known conversion for argument 1 from ‘const MemoryMapping::Config<unsigned char, G1, 192u>’ to ‘bool’
make: *** [test.o] Error 1
